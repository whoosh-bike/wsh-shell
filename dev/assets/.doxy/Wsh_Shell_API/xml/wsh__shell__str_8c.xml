<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wsh__shell__str_8c" kind="file" language="C++">
    <compoundname>wsh_shell_str.c</compoundname>
    <includes refid="wsh__shell__str_8h" local="yes">wsh_shell_str.h</includes>
    <incdepgraph>
      <node id="8">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="1">
        <label>src/wsh_shell_str.c</label>
        <link refid="wsh__shell__str_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>wsh_shell_str.h</label>
        <link refid="wsh__shell__str_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>wsh_shell_cfg.h</label>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>wsh_shell_option.h</label>
        <link refid="wsh__shell__option_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wsh_shell_io.h</label>
        <link refid="wsh__shell__io_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>wsh_shell_types.h</label>
        <link refid="wsh__shell__types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="wsh__shell__str_8c_1a56ced349066d6f3c6df4ff9d9cfefa2e" prot="public" static="no">
        <name>WSH_PS1_SPACE_LEFT</name>
        <param><defname>out</defname></param>
        <param><defname>base</defname></param>
        <initializer>((out) - (base) &lt; (WSH_SHELL_PS1_MAX_LEN - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="3" column="9" bodyfile="src/wsh_shell_str.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wsh__shell__str_8c_1a9d35c0fc6d620aab2c92d6c9bf6ba804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>WshShell_Bool_t</type>
        <definition>WshShell_Bool_t WshShellStr_IsPrintableAscii</definition>
        <argsstring>(WshShell_Char_t ch)</argsstring>
        <name>WshShellStr_IsPrintableAscii</name>
        <param>
          <type>WshShell_Char_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Check whether the given character is a printable ASCII symbol. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the character belongs to the range of printable ASCII characters (from 0x20 &apos; &apos; to 0x7E &apos;~&apos;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is printable ASCII; false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="5" column="17" bodyfile="src/wsh_shell_str.c" bodystart="5" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1a75fcab509bbc6e57796fb144edfadcaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>WshShell_Char_t *</type>
        <definition>WshShell_Char_t* WshShellStr_TrimString</definition>
        <argsstring>(WshShell_Char_t *pString, WshShell_Size_t len)</argsstring>
        <name>WshShellStr_TrimString</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pString</declname>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Trim tabulation and spaces from beginning and end of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pString</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string to be trimmed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of an input string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WshShell_Char_t*: Pointer to a trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="9" column="17" bodyfile="src/wsh_shell_str.c" bodystart="9" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1afa52b0f22a788ba56269460dfe7f09b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_ParseToArgcArgv</definition>
        <argsstring>(WshShell_Char_t *pStr, WshShell_Size_t *pArgNum, const WshShell_Char_t *pArgBuff[], WshShell_Size_t maxArgNum)</argsstring>
        <name>WshShellStr_ParseToArgcArgv</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pStr</declname>
        </param>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pArgNum</declname>
        </param>
        <param>
          <type>const WshShell_Char_t *</type>
          <declname>pArgBuff</declname>
          <array>[]</array>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>maxArgNum</declname>
        </param>
        <briefdescription>
<para>Parse a string into space-separated tokens, handling quoted substrings as single tokens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function splits the input string <computeroutput>pStr</computeroutput> into tokens by replacing spaces with null terminators (<computeroutput>\0</computeroutput>). Tokens are written as pointers to the beginning of each token into the <computeroutput>pArgBuff</computeroutput> array. Quoted substrings (enclosed in double quotes <computeroutput>"</computeroutput>), if any, are treated as a single token. Quotes themselves are removed during parsing. Ñ‡ <simplesect kind="note"><para>This function modifies the input string in-place. Spaces and quotes are replaced with <computeroutput>\0</computeroutput>. Escaped or nested quotes are not supported.</para>
</simplesect>
Example: Input: <computeroutput>&quot;arg1 arg2 \&quot;quoted string" arg3&quot;&lt;/tt&gt;
 Output: &lt;tt&gt;pArgBuff = { &quot;arg1&quot;, &quot;arg2&quot;, &quot;quoted string&quot;, &quot;arg3" }</computeroutput>, <computeroutput>*pArgNum = 4</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the null-terminated string to be parsed. Will be modified in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pArgNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter that will be set to the number of parsed tokens. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pArgBuff</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of string pointers (tokens). Must be large enough to hold all tokens. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxArgNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of tokens that can be stored in <computeroutput>pArgBuff</computeroutput>. Excess tokens are discarded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="28" column="6" bodyfile="src/wsh_shell_str.c" bodystart="28" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1a717aa2a87c1d1b039e986781479199ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_IncrInterCnt</definition>
        <argsstring>(WshShell_Size_t *pInterCnt, WshShell_Size_t buffSize)</argsstring>
        <name>WshShellStr_IncrInterCnt</name>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pInterCnt</declname>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>buffSize</declname>
        </param>
        <briefdescription>
<para>Increase buffer counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pInterCnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of a buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="63" column="6" bodyfile="src/wsh_shell_str.c" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1ab4b7be929d544496dbab7a625bc70204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_DecrInterCnt</definition>
        <argsstring>(WshShell_Size_t *pInterCnt)</argsstring>
        <name>WshShellStr_DecrInterCnt</name>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pInterCnt</declname>
        </param>
        <briefdescription>
<para>Decrease buffer counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pInterCnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="72" column="6" bodyfile="src/wsh_shell_str.c" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1a10832dc9d2d88b0577df9bac3e6e533e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_AccessBitsToStr</definition>
        <argsstring>(WshShell_Size_t access, WshShell_Char_t *pOutStr)</argsstring>
        <name>WshShellStr_AccessBitsToStr</name>
        <param>
          <type>WshShell_Size_t</type>
          <declname>access</declname>
        </param>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pOutStr</declname>
        </param>
        <briefdescription>
<para>Converts access permission bits to a human-readable string like &quot;rwx&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This function translates access bit flags into a POSIX-style permission string. The result is written into the provided buffer.</para>
<para>The output format is:<itemizedlist>
<listitem><para><lsquo/>&apos;r<rsquo/><computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_READ<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;w&apos;<computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_WRITE<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;x&apos;<computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_EXECUTE<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;A&apos;<computeroutput>if</computeroutput>access == WSH_SHELL_OPT_ACCESS_ANY` (optional fourth character)</para>
</listitem></itemizedlist>
</para>
<para>Examples:<itemizedlist>
<listitem><para><computeroutput>0x00</computeroutput> â†’ <computeroutput>&quot;---&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0x03</computeroutput> â†’ <computeroutput>&quot;rw-&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0x07</computeroutput> â†’ <computeroutput>&quot;rwx&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0xFFFFFFFF</computeroutput>â†’ <computeroutput>&quot;rwxA&quot;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of access flags (e.g. WSH_SHELL_OPT_ACCESS_READ). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write result to. Must be at least 5 bytes long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="81" column="6" bodyfile="src/wsh_shell_str.c" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1a97dee099f0ae0c2f8bbd5fada5231e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_GroupBitsToStr</definition>
        <argsstring>(WshShell_Size_t group, WshShell_Char_t *pOutStr)</argsstring>
        <name>WshShellStr_GroupBitsToStr</name>
        <param>
          <type>WshShell_Size_t</type>
          <declname>group</declname>
        </param>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pOutStr</declname>
        </param>
        <briefdescription>
<para>Converts group bitmask into symbolic group string (e.g. &quot;*--*&quot;, &quot;---*&quot;, etc). </para>
        </briefdescription>
        <detaileddescription>
<para>Produces a fixed-length string of &apos;*&apos; and &apos;-&apos; characters from highest to lowest group index.</para>
<para>Example for 4 groups:<itemizedlist>
<listitem><para>WSH_SHELL_CMD_GROUP_ADMIN = bit 0 â†’ rightmost char</para>
</listitem><listitem><para>WSH_SHELL_CMD_GROUP_MANUF = bit 3 â†’ leftmost char</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of groups. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer (must be at least WSH_SHELL_GROUP_STR_LEN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="93" column="6" bodyfile="src/wsh_shell_str.c" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8c_1afdbc7488bc3b39b644c1ce3f4a978408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_GeneratePS1</definition>
        <argsstring>(WshShell_Char_t *pPS1, WshShellStr_PS1Data_t *pPS1Data)</argsstring>
        <name>WshShellStr_GeneratePS1</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pPS1</declname>
        </param>
        <param>
          <type><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref> *</type>
          <declname>pPS1Data</declname>
        </param>
        <briefdescription>
<para>Applies the PS1 template and generates the final PS1 string. </para>
        </briefdescription>
        <detaileddescription>
<para>Expands a predefined PS1 template (<computeroutput>WSH_SHELL_PS1_TEMPLATE</computeroutput>) into a complete PS1 string, substituting special format specifiers with runtime values like username, device name, and ANSI escape sequences for styling (colors, bold, reset).</para>
<para>Supported format specifiers in the template:<itemizedlist>
<listitem><para><computeroutput>u</computeroutput> â€” current username (from <computeroutput>pUser</computeroutput>)</para>
</listitem><listitem><para><computeroutput>d</computeroutput> â€” current device name (from <computeroutput>pDevice</computeroutput>)</para>
</listitem><listitem><para><computeroutput>cN</computeroutput> â€” ANSI color code from predefined color map (0 â‰¤ N â‰¤ 9)</para>
</listitem><listitem><para><computeroutput>b</computeroutput> â€” ANSI escape sequence for bold text</para>
</listitem><listitem><para><computeroutput>r</computeroutput> â€” ANSI escape sequence to reset all styles</para>
</listitem><listitem><para>Any unknown <computeroutput>%</computeroutput> sequence is copied verbatim as <computeroutput>X</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The output is truncated if it would exceed <computeroutput>WSH_SHELL_PS1_MAX_LEN - 1</computeroutput>. The result is always null-terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pPS1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for the final PS1 string. Must be at least <computeroutput>WSH_SHELL_PS1_MAX_LEN</computeroutput> in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pPS1Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user name, divice name or other strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.c" line="205" column="6" bodyfile="src/wsh_shell_str.c" bodystart="205" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wsh__shell__str_8h" kindref="compound">wsh_shell_str.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WSH_PS1_SPACE_LEFT(out,<sp/>base)<sp/>((out)<sp/>-<sp/>(base)<sp/>&lt;<sp/>(WSH_SHELL_PS1_MAX_LEN<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">WshShell_Bool_t<sp/><ref refid="wsh__shell__str_8h_1a9d35c0fc6d620aab2c92d6c9bf6ba804" kindref="member">WshShellStr_IsPrintableAscii</ref>(WshShell_Char_t<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>ASCII<sp/>printable<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">WshShell_Char_t*<sp/><ref refid="wsh__shell__str_8h_1a75fcab509bbc6e57796fb144edfadcaa" kindref="member">WshShellStr_TrimString</ref>(WshShell_Char_t*<sp/>pString,<sp/>WshShell_Size_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pString);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pString)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pString;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Char_t*<sp/>pStrBegin<sp/>=<sp/>pString;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((*pStrBegin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(*pStrBegin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">))<sp/>&amp;&amp;<sp/>(pStrBegin<sp/>&lt;<sp/>(pString<sp/>+<sp/>len)))<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pStrBegin++;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Char_t*<sp/>pStrEnd<sp/>=<sp/>pString<sp/>+<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((pStrEnd<sp/>&gt;=<sp/>pStrBegin)<sp/>&amp;&amp;<sp/>(*pStrEnd<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>*pStrEnd<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pStrEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pStrEnd--;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pStrBegin;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1afa52b0f22a788ba56269460dfe7f09b3" kindref="member">WshShellStr_ParseToArgcArgv</ref>(WshShell_Char_t*<sp/>pStr,<sp/>WshShell_Size_t*<sp/>pArgNum,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pArgBuff[],<sp/>WshShell_Size_t<sp/>maxArgNum)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pStr<sp/>&amp;&amp;<sp/>pArgNum<sp/>&amp;&amp;<sp/>pArgBuff<sp/>&amp;&amp;<sp/>maxArgNum<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pStr<sp/>||<sp/>!pArgNum<sp/>||<sp/>!pArgBuff<sp/>||<sp/>maxArgNum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>*pArgNum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Bool_t<sp/>inQuotes<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Size_t<sp/>len<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WSH_SHELL_STRLEN(pStr);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WshShell_Size_t<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>len;<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pStr[idx]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inQuotes<sp/><sp/>=<sp/>!inQuotes;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pStr[idx]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inQuotes<sp/>&amp;&amp;<sp/>pStr[idx]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pStr[idx]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>pointers<sp/>to<sp/>tokens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WshShell_Size_t<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>len;)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pStr[idx]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pArgNum<sp/>&lt;<sp/>maxArgNum)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pArgBuff[(*pArgNum)++]<sp/>=<sp/>&amp;pStr[idx];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>until<sp/>next<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>pStr[idx]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a717aa2a87c1d1b039e986781479199ba" kindref="member">WshShellStr_IncrInterCnt</ref>(WshShell_Size_t*<sp/>pInterCnt,<sp/>WshShell_Size_t<sp/>buffSize)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pInterCnt<sp/>&amp;&amp;<sp/>buffSize<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pInterCnt<sp/>||<sp/>buffSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pInterCnt<sp/>&lt;<sp/>buffSize<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*pInterCnt)++;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1ab4b7be929d544496dbab7a625bc70204" kindref="member">WshShellStr_DecrInterCnt</ref>(WshShell_Size_t*<sp/>pInterCnt)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pInterCnt);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pInterCnt)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pInterCnt<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*pInterCnt)--;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a10832dc9d2d88b0577df9bac3e6e533e" kindref="member">WshShellStr_AccessBitsToStr</ref>(WshShell_Size_t<sp/>access,<sp/>WshShell_Char_t*<sp/>pOutStr)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pOutStr);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pOutStr)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>pOutStr[0]<sp/>=<sp/>(access<sp/>&amp;<sp/>WSH_SHELL_OPT_ACCESS_READ)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>pOutStr[1]<sp/>=<sp/>(access<sp/>&amp;<sp/>WSH_SHELL_OPT_ACCESS_WRITE)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>pOutStr[2]<sp/>=<sp/>(access<sp/>&amp;<sp/>WSH_SHELL_OPT_ACCESS_EXECUTE)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>pOutStr[3]<sp/>=<sp/>(access<sp/>==<sp/>WSH_SHELL_OPT_ACCESS_ANY)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>pOutStr[4]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a97dee099f0ae0c2f8bbd5fada5231e9b" kindref="member">WshShellStr_GroupBitsToStr</ref>(WshShell_Size_t<sp/>group,<sp/>WshShell_Char_t*<sp/>pOutStr)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pOutStr);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pOutStr)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WshShell_S32_t<sp/>groupIdx<sp/>=<sp/>WSH_SHELL_CMD_GROUP_MAX_COUNT<sp/>-<sp/>1;<sp/>groupIdx<sp/>&gt;=<sp/>0;<sp/>--groupIdx)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOutStr++<sp/>=<sp/>(group<sp/>==<sp/>WSH_SHELL_CMD_GROUP_ALL<sp/>||<sp/>(group<sp/>&amp;<sp/>(1U<sp/>&lt;&lt;<sp/>groupIdx)))<sp/>?<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>*pOutStr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WSH_SHELL_PS1_CUSTOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>WshShellStr_ColorMap[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_BLACK,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_RED,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_GREEN,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_YELLOW,<sp/><sp/></highlight><highlight class="comment">//<sp/>%c3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_BLUE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_PURPLE,<sp/><sp/></highlight><highlight class="comment">//<sp/>%c5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_CYAN,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_WHITE<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>%c7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1afdbc7488bc3b39b644c1ce3f4a978408" kindref="member">WshShellStr_GeneratePS1</ref>(WshShell_Char_t*<sp/>pPS1,<sp/><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref>*<sp/>pPS1Data)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pPS1<sp/>&amp;&amp;<sp/>pPS1Data-&gt;UserName<sp/>&amp;&amp;<sp/>pPS1Data-&gt;DevName);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pPS1<sp/>||<sp/>!pPS1Data-&gt;UserName<sp/>||<sp/>!pPS1Data-&gt;DevName)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Size_t<sp/>colorMapSize<sp/>=<sp/>WSH_SHELL_ARR_LEN(WshShellStr_ColorMap);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Char_t*<sp/>pOut<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pPS1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcIn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WSH_SHELL_PS1_TEMPLATE;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcCurrColor<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcIn<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pcIn;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*pcIn)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcUser<sp/>=<sp/>pPS1Data-&gt;UserName;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcUser<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcUser++;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Device<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcDev<sp/>=<sp/>pPS1Data-&gt;DevName;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcDev<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcDev++;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Color<sp/>choice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pcIn;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pcIn<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>colors<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WshShell_Size_t<sp/>idx<sp/>=<sp/>*pcIn<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcColor<sp/>=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(idx<sp/>&lt;<sp/>colorMapSize)<sp/>?<sp/>WshShellStr_ColorMap[idx]<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcCurrColor<sp/>=<sp/>pcColor;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcColor<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcColor++;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcReset<sp/>=<sp/>WSH_SHELL_ESC_RESET_STYLE;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcReset<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcReset++;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Bold<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcBold<sp/>=<sp/>WSH_SHELL_ECS_SET_MODE_BOLD;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcBold<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcBold++;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pcIn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Interactive<sp/>command<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pPS1Data-&gt;InterCmdName<sp/>&amp;&amp;<sp/>*pPS1Data-&gt;InterCmdName)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcWhite<sp/>=<sp/>WSH_SHELL_COLOR_WHITE;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcWhite<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcWhite++;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcColor<sp/>=<sp/>pcCurrColor;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcColor<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcColor++;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcInter<sp/>=<sp/>pPS1Data-&gt;InterCmdName;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcInter<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcInter++;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcWhite<sp/>=<sp/>WSH_SHELL_COLOR_WHITE;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pcWhite<sp/>&amp;&amp;<sp/>WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcWhite++;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WSH_PS1_SPACE_LEFT(pOut,<sp/>pPS1))</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcIn;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pOut++<sp/>=<sp/>*pcIn;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pcIn;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>*pOut<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>WSH_SHELL_PS1_CUSTOM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1afdbc7488bc3b39b644c1ce3f4a978408" kindref="member">WshShellStr_GeneratePS1</ref>(WshShell_Char_t*<sp/>pPS1,<sp/><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref>*<sp/>pPS1Data)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_ASSERT(pPS1<sp/>&amp;&amp;<sp/>pPS1Data-&gt;UserName<sp/>&amp;&amp;<sp/>pPS1Data-&gt;DevName);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pPS1<sp/>||<sp/>!pPS1Data-&gt;UserName<sp/>||<sp/>!pPS1Data-&gt;DevName)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pcInterCmd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pPS1Data-&gt;InterCmdName<sp/>&amp;&amp;<sp/>*pPS1Data-&gt;InterCmdName)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>WshShell_Char_t<sp/>interCmdBuff[2<sp/>*<sp/>WSH_SHELL_CMD_NAME_LEN];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WSH_SHELL_SNPRINTF(interCmdBuff,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(interCmdBuff),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_WHITE<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>WSH_SHELL_COLOR_GREEN</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal"><sp/>WSH_SHELL_COLOR_WHITE<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPS1Data-&gt;InterCmdName);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcInterCmd<sp/>=<sp/>interCmdBuff;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>WSH_SHELL_SNPRINTF(pPS1,<sp/>WSH_SHELL_PS1_MAX_LEN,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WSH_SHELL_ESC_RESET_STYLE<sp/>WSH_SHELL_ECS_SET_MODE_BOLD<sp/>WSH_SHELL_COLOR_CYAN</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal"><sp/>WSH_SHELL_COLOR_WHITE<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>WSH_SHELL_COLOR_PURPLE<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pcInterCmd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WSH_SHELL_COLOR_WHITE<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>WSH_SHELL_ESC_RESET_STYLE,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPS1Data-&gt;UserName,<sp/>pPS1Data-&gt;DevName,<sp/>pcInterCmd);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WSH_SHELL_PS1_CUSTOM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/wsh_shell_str.c"/>
  </compounddef>
</doxygen>
