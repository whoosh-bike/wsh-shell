<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wsh__shell__str_8h" kind="file" language="C++">
    <compoundname>wsh_shell_str.h</compoundname>
    <includes local="yes">wsh_shell_cfg.h</includes>
    <includes refid="wsh__shell__io_8h" local="yes">wsh_shell_io.h</includes>
    <includes refid="wsh__shell__option_8h" local="yes">wsh_shell_option.h</includes>
    <includes refid="wsh__shell__types_8h" local="yes">wsh_shell_types.h</includes>
    <includedby refid="wsh__shell_8h" local="yes">src/wsh_shell.h</includedby>
    <includedby refid="wsh__shell__autocomplete_8h" local="yes">src/wsh_shell_autocomplete.h</includedby>
    <includedby refid="wsh__shell__cmd_8h" local="yes">src/wsh_shell_cmd.h</includedby>
    <includedby refid="wsh__shell__history_8h" local="yes">src/wsh_shell_history.h</includedby>
    <includedby refid="wsh__shell__io_8h" local="yes">src/wsh_shell_io.h</includedby>
    <includedby refid="wsh__shell__str_8c" local="yes">src/wsh_shell_str.c</includedby>
    <incdepgraph>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="1">
        <label>src/wsh_shell_str.h</label>
        <link refid="wsh__shell__str_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>wsh_shell_cfg.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>wsh_shell_option.h</label>
        <link refid="wsh__shell__option_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>wsh_shell_io.h</label>
        <link refid="wsh__shell__io_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>wsh_shell_types.h</label>
        <link refid="wsh__shell__types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/wsh_shell_str.h</label>
        <link refid="wsh__shell__str_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/wsh_shell_promptwait.h</label>
        <link refid="wsh__shell__promptwait_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/wsh_shell_io.h</label>
        <link refid="wsh__shell__io_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/wsh_shell_history.h</label>
        <link refid="wsh__shell__history_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/wsh_shell_cmd_def.h</label>
        <link refid="wsh__shell__cmd__def_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/wsh_shell.h</label>
        <link refid="wsh__shell_8h"/>
      </node>
      <node id="9">
        <label>src/wsh_shell_interact.h</label>
        <link refid="wsh__shell__interact_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/wsh_shell_cmd.h</label>
        <link refid="wsh__shell__cmd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/wsh_shell_esc.h</label>
        <link refid="wsh__shell__esc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/wsh_shell_autocomplete.h</label>
        <link refid="wsh__shell__autocomplete_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structWshShellStr__PS1Data__t" prot="public">WshShellStr_PS1Data_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="wsh__shell__str_8h_1ae15124c3c126711ff2169b77c4c0e96e" prot="public" static="no">
        <name>WSH_SHELL_PRESS_ENTER_TO_LOG_IN_STR</name>
        <initializer>&quot;Press &lt;Enter&gt; to log in...&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="21" column="9" bodyfile="src/wsh_shell_str.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wsh__shell__str_8h_1a9d35c0fc6d620aab2c92d6c9bf6ba804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>WshShell_Bool_t</type>
        <definition>WshShell_Bool_t WshShellStr_IsPrintableAscii</definition>
        <argsstring>(WshShell_Char_t ch)</argsstring>
        <name>WshShellStr_IsPrintableAscii</name>
        <param>
          <type>WshShell_Char_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Check whether the given character is a printable ASCII symbol. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the character belongs to the range of printable ASCII characters (from 0x20 &apos; &apos; to 0x7E &apos;~&apos;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is printable ASCII; false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="39" column="17" bodyfile="src/wsh_shell_str.c" bodystart="5" bodyend="7" declfile="src/wsh_shell_str.h" declline="39" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1a75fcab509bbc6e57796fb144edfadcaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>WshShell_Char_t *</type>
        <definition>WshShell_Char_t* WshShellStr_TrimString</definition>
        <argsstring>(WshShell_Char_t *pString, WshShell_Size_t len)</argsstring>
        <name>WshShellStr_TrimString</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pString</declname>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Trim tabulation and spaces from beginning and end of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pString</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string to be trimmed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of an input string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WshShell_Char_t*: Pointer to a trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="49" column="17" bodyfile="src/wsh_shell_str.c" bodystart="9" bodyend="26" declfile="src/wsh_shell_str.h" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1afa52b0f22a788ba56269460dfe7f09b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_ParseToArgcArgv</definition>
        <argsstring>(WshShell_Char_t *pStr, WshShell_Size_t *pArgNum, const WshShell_Char_t *pArgBuff[], WshShell_Size_t maxArgNum)</argsstring>
        <name>WshShellStr_ParseToArgcArgv</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pStr</declname>
        </param>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pArgNum</declname>
        </param>
        <param>
          <type>const WshShell_Char_t *</type>
          <declname>pArgBuff</declname>
          <array>[]</array>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>maxArgNum</declname>
        </param>
        <briefdescription>
<para>Parse a string into space-separated tokens, handling quoted substrings as single tokens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function splits the input string <computeroutput>pStr</computeroutput> into tokens by replacing spaces with null terminators (<computeroutput>\0</computeroutput>). Tokens are written as pointers to the beginning of each token into the <computeroutput>pArgBuff</computeroutput> array. Quoted substrings (enclosed in double quotes <computeroutput>"</computeroutput>), if any, are treated as a single token. Quotes themselves are removed during parsing. ч <simplesect kind="note"><para>This function modifies the input string in-place. Spaces and quotes are replaced with <computeroutput>\0</computeroutput>. Escaped or nested quotes are not supported.</para>
</simplesect>
Example: Input: <computeroutput>&quot;arg1 arg2 \&quot;quoted string" arg3&quot;&lt;/tt&gt;
 Output: &lt;tt&gt;pArgBuff = { &quot;arg1&quot;, &quot;arg2&quot;, &quot;quoted string&quot;, &quot;arg3" }</computeroutput>, <computeroutput>*pArgNum = 4</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the null-terminated string to be parsed. Will be modified in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pArgNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter that will be set to the number of parsed tokens. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pArgBuff</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of string pointers (tokens). Must be large enough to hold all tokens. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxArgNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of tokens that can be stored in <computeroutput>pArgBuff</computeroutput>. Excess tokens are discarded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="71" column="6" bodyfile="src/wsh_shell_str.c" bodystart="28" bodyend="61" declfile="src/wsh_shell_str.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1a717aa2a87c1d1b039e986781479199ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_IncrInterCnt</definition>
        <argsstring>(WshShell_Size_t *pInterCnt, WshShell_Size_t buffSize)</argsstring>
        <name>WshShellStr_IncrInterCnt</name>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pInterCnt</declname>
        </param>
        <param>
          <type>WshShell_Size_t</type>
          <declname>buffSize</declname>
        </param>
        <briefdescription>
<para>Increase buffer counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pInterCnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of a buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="80" column="6" bodyfile="src/wsh_shell_str.c" bodystart="63" bodyend="70" declfile="src/wsh_shell_str.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1ab4b7be929d544496dbab7a625bc70204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_DecrInterCnt</definition>
        <argsstring>(WshShell_Size_t *pInterCnt)</argsstring>
        <name>WshShellStr_DecrInterCnt</name>
        <param>
          <type>WshShell_Size_t *</type>
          <declname>pInterCnt</declname>
        </param>
        <briefdescription>
<para>Decrease buffer counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pInterCnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="87" column="6" bodyfile="src/wsh_shell_str.c" bodystart="72" bodyend="79" declfile="src/wsh_shell_str.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1a10832dc9d2d88b0577df9bac3e6e533e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_AccessBitsToStr</definition>
        <argsstring>(WshShell_Size_t access, WshShell_Char_t *pOutStr)</argsstring>
        <name>WshShellStr_AccessBitsToStr</name>
        <param>
          <type>WshShell_Size_t</type>
          <declname>access</declname>
        </param>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pOutStr</declname>
        </param>
        <briefdescription>
<para>Converts access permission bits to a human-readable string like &quot;rwx&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This function translates access bit flags into a POSIX-style permission string. The result is written into the provided buffer.</para>
<para>The output format is:<itemizedlist>
<listitem><para><lsquo/>&apos;r<rsquo/><computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_READ<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;w&apos;<computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_WRITE<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;x&apos;<computeroutput>if</computeroutput>WSH_SHELL_OPT_ACCESS_EXECUTE<computeroutput>is set, otherwise</computeroutput>&apos;-&apos;<computeroutput> -</computeroutput>&apos;A&apos;<computeroutput>if</computeroutput>access == WSH_SHELL_OPT_ACCESS_ANY` (optional fourth character)</para>
</listitem></itemizedlist>
</para>
<para>Examples:<itemizedlist>
<listitem><para><computeroutput>0x00</computeroutput> → <computeroutput>&quot;---&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0x03</computeroutput> → <computeroutput>&quot;rw-&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0x07</computeroutput> → <computeroutput>&quot;rwx&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>0xFFFFFFFF</computeroutput>→ <computeroutput>&quot;rwxA&quot;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of access flags (e.g. WSH_SHELL_OPT_ACCESS_READ). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write result to. Must be at least 5 bytes long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="110" column="6" bodyfile="src/wsh_shell_str.c" bodystart="81" bodyend="91" declfile="src/wsh_shell_str.h" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1a97dee099f0ae0c2f8bbd5fada5231e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_GroupBitsToStr</definition>
        <argsstring>(WshShell_Size_t group, WshShell_Char_t *pOutStr)</argsstring>
        <name>WshShellStr_GroupBitsToStr</name>
        <param>
          <type>WshShell_Size_t</type>
          <declname>group</declname>
        </param>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pOutStr</declname>
        </param>
        <briefdescription>
<para>Converts group bitmask into symbolic group string (e.g. &quot;*--*&quot;, &quot;---*&quot;, etc). </para>
        </briefdescription>
        <detaileddescription>
<para>Produces a fixed-length string of &apos;*&apos; and &apos;-&apos; characters from highest to lowest group index.</para>
<para>Example for 4 groups:<itemizedlist>
<listitem><para>WSH_SHELL_CMD_GROUP_ADMIN = bit 0 → rightmost char</para>
</listitem><listitem><para>WSH_SHELL_CMD_GROUP_MANUF = bit 3 → leftmost char</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of groups. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer (must be at least WSH_SHELL_GROUP_STR_LEN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="124" column="6" bodyfile="src/wsh_shell_str.c" bodystart="93" bodyend="102" declfile="src/wsh_shell_str.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wsh__shell__str_8h_1afdbc7488bc3b39b644c1ce3f4a978408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WshShellStr_GeneratePS1</definition>
        <argsstring>(WshShell_Char_t *pPS1, WshShellStr_PS1Data_t *pPS1Data)</argsstring>
        <name>WshShellStr_GeneratePS1</name>
        <param>
          <type>WshShell_Char_t *</type>
          <declname>pPS1</declname>
        </param>
        <param>
          <type><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref> *</type>
          <declname>pPS1Data</declname>
        </param>
        <briefdescription>
<para>Applies the PS1 template and generates the final PS1 string. </para>
        </briefdescription>
        <detaileddescription>
<para>Expands a predefined PS1 template (<computeroutput>WSH_SHELL_PS1_TEMPLATE</computeroutput>) into a complete PS1 string, substituting special format specifiers with runtime values like username, device name, and ANSI escape sequences for styling (colors, bold, reset).</para>
<para>Supported format specifiers in the template:<itemizedlist>
<listitem><para><computeroutput>u</computeroutput> — current username (from <computeroutput>pUser</computeroutput>)</para>
</listitem><listitem><para><computeroutput>d</computeroutput> — current device name (from <computeroutput>pDevice</computeroutput>)</para>
</listitem><listitem><para><computeroutput>cN</computeroutput> — ANSI color code from predefined color map (0 ≤ N ≤ 9)</para>
</listitem><listitem><para><computeroutput>b</computeroutput> — ANSI escape sequence for bold text</para>
</listitem><listitem><para><computeroutput>r</computeroutput> — ANSI escape sequence to reset all styles</para>
</listitem><listitem><para>Any unknown <computeroutput>%</computeroutput> sequence is copied verbatim as <computeroutput>X</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The output is truncated if it would exceed <computeroutput>WSH_SHELL_PS1_MAX_LEN - 1</computeroutput>. The result is always null-terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pPS1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for the final PS1 string. Must be at least <computeroutput>WSH_SHELL_PS1_MAX_LEN</computeroutput> in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pPS1Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user name, divice name or other strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wsh_shell_str.h" line="148" column="6" bodyfile="src/wsh_shell_str.c" bodystart="205" bodyend="227" declfile="src/wsh_shell_str.h" declline="148" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common string operations for user input processing. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Whoosh Embedded Team </para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__WSH_SHELL_STR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__WSH_SHELL_STR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wsh_shell_cfg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wsh__shell__io_8h" kindref="compound">wsh_shell_io.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wsh__shell__option_8h" kindref="compound">wsh_shell_option.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wsh__shell__types_8h" kindref="compound">wsh_shell_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WSH_SHELL_PRESS_ENTER_TO_LOG_IN_STR<sp/>&quot;Press<sp/>&lt;Enter&gt;<sp/>to<sp/>log<sp/>in...&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structWshShellStr__PS1Data__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>UserName;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>DevName;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>WshShell_Char_t*<sp/>InterCmdName;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">WshShell_Bool_t<sp/><ref refid="wsh__shell__str_8h_1a9d35c0fc6d620aab2c92d6c9bf6ba804" kindref="member">WshShellStr_IsPrintableAscii</ref>(WshShell_Char_t<sp/>ch);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">WshShell_Char_t*<sp/><ref refid="wsh__shell__str_8h_1a75fcab509bbc6e57796fb144edfadcaa" kindref="member">WshShellStr_TrimString</ref>(WshShell_Char_t*<sp/>pString,<sp/>WshShell_Size_t<sp/>len);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1afa52b0f22a788ba56269460dfe7f09b3" kindref="member">WshShellStr_ParseToArgcArgv</ref>(WshShell_Char_t*<sp/>pStr,<sp/>WshShell_Size_t*<sp/>pArgNum,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WshShell_Char_t*<sp/>pArgBuff[],<sp/>WshShell_Size_t<sp/>maxArgNum);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a717aa2a87c1d1b039e986781479199ba" kindref="member">WshShellStr_IncrInterCnt</ref>(WshShell_Size_t*<sp/>pInterCnt,<sp/>WshShell_Size_t<sp/>buffSize);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1ab4b7be929d544496dbab7a625bc70204" kindref="member">WshShellStr_DecrInterCnt</ref>(WshShell_Size_t*<sp/>pInterCnt);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a10832dc9d2d88b0577df9bac3e6e533e" kindref="member">WshShellStr_AccessBitsToStr</ref>(WshShell_Size_t<sp/>access,<sp/>WshShell_Char_t*<sp/>pOutStr);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1a97dee099f0ae0c2f8bbd5fada5231e9b" kindref="member">WshShellStr_GroupBitsToStr</ref>(WshShell_Size_t<sp/>group,<sp/>WshShell_Char_t*<sp/>pOutStr);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wsh__shell__str_8h_1afdbc7488bc3b39b644c1ce3f4a978408" kindref="member">WshShellStr_GeneratePS1</ref>(WshShell_Char_t*<sp/>pPS1,<sp/><ref refid="structWshShellStr__PS1Data__t" kindref="compound">WshShellStr_PS1Data_t</ref>*<sp/>pPS1Data);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__WSH_SHELL_STR_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/wsh_shell_str.h"/>
  </compounddef>
</doxygen>
